/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/

import Crdp from 'chrome-remote-debug-protocol';
import { DebugProtocol } from 'vscode-debugprotocol';
import { ChromeDebugAdapter } from 'vscode-chrome-debug-core';
import { AttachRequestArguments, LaunchRequestArguments } from './node2DebugInterfaces.d';

import * as cp from 'child_process';

export declare class Node2DebugAdapter extends ChromeDebugAdapter {
    private static NODE;
    private static RUNINTERMINAL_TIMEOUT;
    private static NODE_TERMINATION_POLL_INTERVAL;

    private _loggedTargetVersion: boolean;
    private _nodeProcessId: number;
    private _pollForNodeProcess: boolean;

    // Flags relevant during init
    private _continueAfterConfigDone;
    private _entryPauseEvent: Crdp.Debugger.PausedEvent;
    private _waitingForEntryPauseEvent;
    private _finishedConfig;

    private _supportsRunInTerminalRequest: boolean;
    private _restartMode: boolean;
    private _isTerminated: boolean;
    private _adapterID: string;

    public initialize(args: DebugProtocol.InitializeRequestArguments): DebugProtocol.Capabilities

    public launch(args: LaunchRequestArguments): Promise<void>
    public attach(args: AttachRequestArguments): Promise<void>
    protected doAttach(port: number, targetUrl?: string, address?: string, timeout?: number): Promise<void>
    private launchInTerminal(termArgs: DebugProtocol.RunInTerminalRequestArguments): Promise<void>
    private launchInInternalConsole(runtimeExecutable: string, launchArgs: string[], spawnOpts?: cp.SpawnOptions): Promise<void>

    /**
     * Override so that -core's call on attach will be ignored, and we can wait until the first break when ready to set BPs.
     */
    protected sendInitializedEvent(): void
    public configurationDone(): Promise<void>
    private killNodeProcess(): void
    public terminateSession(reason: string): void
    protected onPaused(notification: Crdp.Debugger.PausedEvent): void
    private resolveProgramPath(programPath: string, sourceMaps: boolean): Promise<string>

    /**
     * Wait 500ms for the entry pause event, and if it doesn't come, move on with life.
     * During attach, we don't know whether it's paused when attaching.
     */
    private beginWaitingForDebuggerPaused(): void

    /**
     * Override addBreakpoints, which is called by setBreakpoints to make the actual call to Chrome.
     */
    protected addBreakpoints(url: string, breakpoints: DebugProtocol.SourceBreakpoint[]): Promise<Crdp.Debugger.SetBreakpointResponse[]>
    private getNodeProcessDetailsIfNeeded(): Promise<void>
    private startPollingForNodeTermination(): void
    private logLaunchCommand(executable: string, args: string[])
    protected globalEvaluate(args: Crdp.Runtime.EvaluateRequest): Promise<Crdp.Runtime.EvaluateResponse>

    /**
     * 'Path does not exist' error
     */
    private getNotExistErrorResponse(attribute: string, path: string): Promise<void>

    /**
     * 'Path not absolute' error with 'More Information' link.
     */
    private getRelativePathErrorResponse(attribute: string, path: string): Promise<void>
    private getRuntimeNotOnPathErrorResponse(runtime: string): Promise<void>

    /**
     * Send error response with 'More Information' link.
     */
    private getErrorResponseWithInfoLink(code: number, format: string, variables: any, infoId: number): Promise<void>
    protected getReadonlyOrigin(aPath: string): string
}

